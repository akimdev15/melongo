// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user_tokens.sql

package database

import (
	"context"
	"time"
)

const createUserToken = `-- name: CreateUserToken :one
INSERT INTO user_tokens (id, api_key, access_token, refresh_token, expire_time)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, api_key, access_token, refresh_token, expire_time, created_at, updated_at
`

type CreateUserTokenParams struct {
	ID           string
	ApiKey       string
	AccessToken  string
	RefreshToken string
	ExpireTime   time.Time
}

func (q *Queries) CreateUserToken(ctx context.Context, arg CreateUserTokenParams) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, createUserToken,
		arg.ID,
		arg.ApiKey,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpireTime,
	)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.ApiKey,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpireTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserTokenByAPIKey = `-- name: GetUserTokenByAPIKey :one
SELECT id, api_key, access_token, refresh_token, expire_time, created_at, updated_at FROM user_tokens WHERE api_key = $1
`

func (q *Queries) GetUserTokenByAPIKey(ctx context.Context, apiKey string) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, getUserTokenByAPIKey, apiKey)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.ApiKey,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpireTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserTokenByAccessToken = `-- name: GetUserTokenByAccessToken :one
SELECT id, api_key, access_token, refresh_token, expire_time, created_at, updated_at FROM user_tokens WHERE access_token = $1
`

func (q *Queries) GetUserTokenByAccessToken(ctx context.Context, accessToken string) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, getUserTokenByAccessToken, accessToken)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.ApiKey,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpireTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateToken = `-- name: UpdateToken :exec
UPDATE user_tokens
SET access_token = $1,
    refresh_token = $2,
    expire_time = $3,
    updated_at = $4
WHERE id = $5
`

type UpdateTokenParams struct {
	AccessToken  string
	RefreshToken string
	ExpireTime   time.Time
	UpdatedAt    time.Time
	ID           string
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateToken,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpireTime,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
