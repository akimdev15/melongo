// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: playlist.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlaylistService_CreatePlaylist_FullMethodName      = "/proto.PlaylistService/CreatePlaylist"
	PlaylistService_CreateMelonTop100_FullMethodName   = "/proto.PlaylistService/CreateMelonTop100"
	PlaylistService_SaveMelonTop100DB_FullMethodName   = "/proto.PlaylistService/SaveMelonTop100DB"
	PlaylistService_GetMissedTracks_FullMethodName     = "/proto.PlaylistService/GetMissedTracks"
	PlaylistService_ResolveMissedTracks_FullMethodName = "/proto.PlaylistService/ResolveMissedTracks"
)

// PlaylistServiceClient is the client API for PlaylistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistServiceClient interface {
	CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error)
	CreateMelonTop100(ctx context.Context, in *CreateMelonTop100Request, opts ...grpc.CallOption) (*CreateMelonTop100Response, error)
	SaveMelonTop100DB(ctx context.Context, in *SaveMelonTop100DBRequest, opts ...grpc.CallOption) (*SaveMelonTop100DBResponse, error)
	GetMissedTracks(ctx context.Context, in *GetMissedTracksRequest, opts ...grpc.CallOption) (*GetMissedTrackResponse, error)
	ResolveMissedTracks(ctx context.Context, in *ResolveMissedTracksRequest, opts ...grpc.CallOption) (*ResolveMissedTracksResponse, error)
}

type playlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistServiceClient(cc grpc.ClientConnInterface) PlaylistServiceClient {
	return &playlistServiceClient{cc}
}

func (c *playlistServiceClient) CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error) {
	out := new(CreatePlaylistResponse)
	err := c.cc.Invoke(ctx, PlaylistService_CreatePlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) CreateMelonTop100(ctx context.Context, in *CreateMelonTop100Request, opts ...grpc.CallOption) (*CreateMelonTop100Response, error) {
	out := new(CreateMelonTop100Response)
	err := c.cc.Invoke(ctx, PlaylistService_CreateMelonTop100_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) SaveMelonTop100DB(ctx context.Context, in *SaveMelonTop100DBRequest, opts ...grpc.CallOption) (*SaveMelonTop100DBResponse, error) {
	out := new(SaveMelonTop100DBResponse)
	err := c.cc.Invoke(ctx, PlaylistService_SaveMelonTop100DB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) GetMissedTracks(ctx context.Context, in *GetMissedTracksRequest, opts ...grpc.CallOption) (*GetMissedTrackResponse, error) {
	out := new(GetMissedTrackResponse)
	err := c.cc.Invoke(ctx, PlaylistService_GetMissedTracks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) ResolveMissedTracks(ctx context.Context, in *ResolveMissedTracksRequest, opts ...grpc.CallOption) (*ResolveMissedTracksResponse, error) {
	out := new(ResolveMissedTracksResponse)
	err := c.cc.Invoke(ctx, PlaylistService_ResolveMissedTracks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistServiceServer is the server API for PlaylistService service.
// All implementations must embed UnimplementedPlaylistServiceServer
// for forward compatibility
type PlaylistServiceServer interface {
	CreatePlaylist(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error)
	CreateMelonTop100(context.Context, *CreateMelonTop100Request) (*CreateMelonTop100Response, error)
	SaveMelonTop100DB(context.Context, *SaveMelonTop100DBRequest) (*SaveMelonTop100DBResponse, error)
	GetMissedTracks(context.Context, *GetMissedTracksRequest) (*GetMissedTrackResponse, error)
	ResolveMissedTracks(context.Context, *ResolveMissedTracksRequest) (*ResolveMissedTracksResponse, error)
	mustEmbedUnimplementedPlaylistServiceServer()
}

// UnimplementedPlaylistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistServiceServer struct {
}

func (UnimplementedPlaylistServiceServer) CreatePlaylist(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) CreateMelonTop100(context.Context, *CreateMelonTop100Request) (*CreateMelonTop100Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMelonTop100 not implemented")
}
func (UnimplementedPlaylistServiceServer) SaveMelonTop100DB(context.Context, *SaveMelonTop100DBRequest) (*SaveMelonTop100DBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMelonTop100DB not implemented")
}
func (UnimplementedPlaylistServiceServer) GetMissedTracks(context.Context, *GetMissedTracksRequest) (*GetMissedTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissedTracks not implemented")
}
func (UnimplementedPlaylistServiceServer) ResolveMissedTracks(context.Context, *ResolveMissedTracksRequest) (*ResolveMissedTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveMissedTracks not implemented")
}
func (UnimplementedPlaylistServiceServer) mustEmbedUnimplementedPlaylistServiceServer() {}

// UnsafePlaylistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServiceServer will
// result in compilation errors.
type UnsafePlaylistServiceServer interface {
	mustEmbedUnimplementedPlaylistServiceServer()
}

func RegisterPlaylistServiceServer(s grpc.ServiceRegistrar, srv PlaylistServiceServer) {
	s.RegisterService(&PlaylistService_ServiceDesc, srv)
}

func _PlaylistService_CreatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).CreatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_CreatePlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).CreatePlaylist(ctx, req.(*CreatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_CreateMelonTop100_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMelonTop100Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).CreateMelonTop100(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_CreateMelonTop100_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).CreateMelonTop100(ctx, req.(*CreateMelonTop100Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_SaveMelonTop100DB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMelonTop100DBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).SaveMelonTop100DB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_SaveMelonTop100DB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).SaveMelonTop100DB(ctx, req.(*SaveMelonTop100DBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_GetMissedTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissedTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).GetMissedTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_GetMissedTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).GetMissedTracks(ctx, req.(*GetMissedTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_ResolveMissedTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveMissedTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).ResolveMissedTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_ResolveMissedTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).ResolveMissedTracks(ctx, req.(*ResolveMissedTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistService_ServiceDesc is the grpc.ServiceDesc for PlaylistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PlaylistService",
	HandlerType: (*PlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlaylist",
			Handler:    _PlaylistService_CreatePlaylist_Handler,
		},
		{
			MethodName: "CreateMelonTop100",
			Handler:    _PlaylistService_CreateMelonTop100_Handler,
		},
		{
			MethodName: "SaveMelonTop100DB",
			Handler:    _PlaylistService_SaveMelonTop100DB_Handler,
		},
		{
			MethodName: "GetMissedTracks",
			Handler:    _PlaylistService_GetMissedTracks_Handler,
		},
		{
			MethodName: "ResolveMissedTracks",
			Handler:    _PlaylistService_ResolveMissedTracks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playlist.proto",
}
