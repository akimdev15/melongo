// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tracks.sql

package database

import (
	"context"
	"time"
)

const createTrack = `-- name: CreateTrack :one
INSERT INTO tracks (id, name, artist, spotify_id, created_at)
VALUES ($1, $2, $3, $4, $5)
	RETURNING id, name, artist, spotify_id, created_at
`

type CreateTrackParams struct {
	ID        int32
	Name      string
	Artist    string
	SpotifyID string
	CreatedAt time.Time
}

func (q *Queries) CreateTrack(ctx context.Context, arg CreateTrackParams) (Track, error) {
	row := q.db.QueryRowContext(ctx, createTrack,
		arg.ID,
		arg.Name,
		arg.Artist,
		arg.SpotifyID,
		arg.CreatedAt,
	)
	var i Track
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Artist,
		&i.SpotifyID,
		&i.CreatedAt,
	)
	return i, err
}

const getTrackByNameAndArtist = `-- name: GetTrackByNameAndArtist :one
SELECT id, name, artist, spotify_id, created_at FROM tracks WHERE name = $1 and artist = $2
`

type GetTrackByNameAndArtistParams struct {
	Name   string
	Artist string
}

func (q *Queries) GetTrackByNameAndArtist(ctx context.Context, arg GetTrackByNameAndArtistParams) (Track, error) {
	row := q.db.QueryRowContext(ctx, getTrackByNameAndArtist, arg.Name, arg.Artist)
	var i Track
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Artist,
		&i.SpotifyID,
		&i.CreatedAt,
	)
	return i, err
}
