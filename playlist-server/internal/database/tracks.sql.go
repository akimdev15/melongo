// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tracks.sql

package database

import (
	"context"
	"time"
)

const createMissedTrack = `-- name: CreateMissedTrack :one
INSERT INTO missed_tracks (rank, title, artist, date)
VALUES ($1, $2, $3, $4)
	RETURNING rank, title, artist, date
`

type CreateMissedTrackParams struct {
	Rank   int32
	Title  string
	Artist string
	Date   time.Time
}

func (q *Queries) CreateMissedTrack(ctx context.Context, arg CreateMissedTrackParams) (MissedTrack, error) {
	row := q.db.QueryRowContext(ctx, createMissedTrack,
		arg.Rank,
		arg.Title,
		arg.Artist,
		arg.Date,
	)
	var i MissedTrack
	err := row.Scan(
		&i.Rank,
		&i.Title,
		&i.Artist,
		&i.Date,
	)
	return i, err
}

const createResolvedTrack = `-- name: CreateResolvedTrack :one
INSERT INTO resolved_tracks (missed_title, missed_artist, title, artist, uri, date)
VALUES ($1, $2, $3, $4, $5, $6)
	RETURNING missed_title, missed_artist, title, artist, uri, date
`

type CreateResolvedTrackParams struct {
	MissedTitle  string
	MissedArtist string
	Title        string
	Artist       string
	Uri          string
	Date         time.Time
}

func (q *Queries) CreateResolvedTrack(ctx context.Context, arg CreateResolvedTrackParams) (ResolvedTrack, error) {
	row := q.db.QueryRowContext(ctx, createResolvedTrack,
		arg.MissedTitle,
		arg.MissedArtist,
		arg.Title,
		arg.Artist,
		arg.Uri,
		arg.Date,
	)
	var i ResolvedTrack
	err := row.Scan(
		&i.MissedTitle,
		&i.MissedArtist,
		&i.Title,
		&i.Artist,
		&i.Uri,
		&i.Date,
	)
	return i, err
}

const createTrack = `-- name: CreateTrack :one
INSERT INTO tracks (rank, title, artist, uri, date)
VALUES ($1, $2, $3, $4, $5)
	RETURNING rank, title, artist, uri, date
`

type CreateTrackParams struct {
	Rank   int32
	Title  string
	Artist string
	Uri    string
	Date   time.Time
}

func (q *Queries) CreateTrack(ctx context.Context, arg CreateTrackParams) (Track, error) {
	row := q.db.QueryRowContext(ctx, createTrack,
		arg.Rank,
		arg.Title,
		arg.Artist,
		arg.Uri,
		arg.Date,
	)
	var i Track
	err := row.Scan(
		&i.Rank,
		&i.Title,
		&i.Artist,
		&i.Uri,
		&i.Date,
	)
	return i, err
}

const getMissedTracks = `-- name: GetMissedTracks :one
SELECT rank, title, artist, date FROM missed_tracks WHERE title = $1 AND artist = $2
`

type GetMissedTracksParams struct {
	Title  string
	Artist string
}

func (q *Queries) GetMissedTracks(ctx context.Context, arg GetMissedTracksParams) (MissedTrack, error) {
	row := q.db.QueryRowContext(ctx, getMissedTracks, arg.Title, arg.Artist)
	var i MissedTrack
	err := row.Scan(
		&i.Rank,
		&i.Title,
		&i.Artist,
		&i.Date,
	)
	return i, err
}

const getResolvedTrack = `-- name: GetResolvedTrack :one
SELECT missed_title, missed_artist, title, artist, uri, date FROM resolved_tracks WHERE missed_title = $1 AND missed_artist = $2
`

type GetResolvedTrackParams struct {
	MissedTitle  string
	MissedArtist string
}

func (q *Queries) GetResolvedTrack(ctx context.Context, arg GetResolvedTrackParams) (ResolvedTrack, error) {
	row := q.db.QueryRowContext(ctx, getResolvedTrack, arg.MissedTitle, arg.MissedArtist)
	var i ResolvedTrack
	err := row.Scan(
		&i.MissedTitle,
		&i.MissedArtist,
		&i.Title,
		&i.Artist,
		&i.Uri,
		&i.Date,
	)
	return i, err
}

const getTracksByDate = `-- name: GetTracksByDate :many
SELECT rank, title, artist, uri, date FROM tracks WHERE date = $1
`

func (q *Queries) GetTracksByDate(ctx context.Context, date time.Time) ([]Track, error) {
	rows, err := q.db.QueryContext(ctx, getTracksByDate, date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Track
	for rows.Next() {
		var i Track
		if err := rows.Scan(
			&i.Rank,
			&i.Title,
			&i.Artist,
			&i.Uri,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
