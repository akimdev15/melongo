// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: playlist.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlist (name, user_id)
VALUES ($1, $2)
RETURNING id, name, user_id
`

type CreatePlaylistParams struct {
	Name   string
	UserID uuid.UUID
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist, arg.Name, arg.UserID)
	var i Playlist
	err := row.Scan(&i.ID, &i.Name, &i.UserID)
	return i, err
}

const getPlaylist = `-- name: GetPlaylist :one
SELECT id, name, user_id 
FROM playlist 
WHERE user_id = $1 
AND name = $2
`

type GetPlaylistParams struct {
	UserID uuid.UUID
	Name   string
}

func (q *Queries) GetPlaylist(ctx context.Context, arg GetPlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylist, arg.UserID, arg.Name)
	var i Playlist
	err := row.Scan(&i.ID, &i.Name, &i.UserID)
	return i, err
}

const getPlaylistsByUserId = `-- name: GetPlaylistsByUserId :many
SELECT id, name, user_id 
FROM playlist
WHERE user_id = $1
`

func (q *Queries) GetPlaylistsByUserId(ctx context.Context, userID uuid.UUID) ([]Playlist, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylistsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playlist
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(&i.ID, &i.Name, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
